name: Build, Test, and Publish

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*.*.*'  # Trigger on tag pushes like v1.0.0
  pull_request:
    branches:
      - main
      - master
  release:
    types: [published]

jobs:
  build:
    runs-on: windows-latest  # You can change this to ubuntu-latest if preferred

    steps:
      # 1. Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Use the Python version you require

      # 3. Install runtime dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel
          pip install -r requirements.txt
        shell: cmd

      # 4. Clean previous builds to ensure a fresh build environment
      - name: Clean previous builds
        run: |
          if exist build rmdir /s /q build
          if exist dist rmdir /s /q dist
          if exist face_pipeline.egg-info rmdir /s /q face_pipeline.egg-info
        shell: cmd

      # 5. Download 'face2.pt' model if not already present
      - name: Download face2.pt model
        shell: pwsh  # Use PowerShell
        run: |
          $model_dir = "face_pipeline\models"
          $model_path = "$model_dir\face2.pt"
          if (!(Test-Path -Path $model_path)) {
            New-Item -ItemType Directory -Path $model_dir -Force | Out-Null
            Write-Output "Created directory: $model_dir"
            
            # Download the 'face2.pt' model
            Invoke-WebRequest -Uri "https://github.com/wuhplaptop/face-11-n/blob/main/face2.pt?raw=true" -OutFile $model_path
            Write-Output "Downloaded face2.pt to $model_path"
          } else {
            Write-Output "Model already exists at $model_path"
          }

      # 6. Build the Python package (source and wheel distributions)
      - name: Build Python package
        run: |
          python setup.py sdist bdist_wheel
        shell: cmd

      # 7. Verify the contents of the dist directory
      - name: Verify dist contents
        run: |
          echo "Checking dist directory contents:"
          dir dist
        shell: cmd

      # 8. Upload build artifacts for use in the publish job
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-python-package
          path: dist/**/*

      # 9. Run tests to ensure package integrity
      - name: Run tests
        run: |
          REM Install the built package
          for %%f in (dist\*.whl) do pip install %%f || exit 1
          REM Install testing dependencies
          pip install -r requirements-dev.txt
          REM Run tests
          pytest tests/
        shell: cmd

  publish:
    needs: build
    runs-on: windows-latest  # Ensure this matches the build job's runner
    if: >
      ${{ 
        (github.event_name == 'release' && github.event.action == 'published') ||
        (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
      }}
    steps:
      # 1. Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Download the build artifacts uploaded in the build job
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: built-python-package
          path: dist

      # 3. Set up Python environment for publishing
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Ensure consistent Python version

      # 4. Install twine for uploading the package to PyPI
      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install twine
        shell: cmd

      # 5. Publish the package to PyPI using twine
      - name: Publish to PyPI with Twine
        run: |
          python -m twine upload dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
