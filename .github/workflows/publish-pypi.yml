# .github/workflows/publish-pypi.yml

name: Build, Test, and Publish

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*.*.*'  # Trigger on tag pushes like v1.0.0
  pull_request:
    branches:
      - main
      - master
  release:
    types: [published]

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]  # Explicitly specifying Ubuntu 22.04
        python-version: ['3.9', '3.10', '3.11']  # Removed '3.8' and '3.7'
    name: Build and Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            # For Windows, the cache path might differ
            ${{ runner.os == 'Windows' && '~\\AppData\\Local\\pip\\Cache' }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel
          pip install -e .
          pip install -r requirements.txt
          pip install flake8 coverage pytest
        shell: bash

      - name: Lint with flake8
        run: |
          flake8 myfacerec tests setup.py
        shell: bash

      - name: Build Python package
        run: |
          python setup.py sdist bdist_wheel
        shell: bash

      - name: Verify dist contents
        run: |
          echo "Checking dist directory contents:"
          ls dist
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-python-package
          path: dist/**/*

      - name: Run tests with coverage
        run: |
          coverage run -m pytest
          coverage report
          coverage xml
        shell: bash

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
          flags: unittests
          name: codecov-umbrella
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  publish:
    needs: build_and_test
    runs-on: ubuntu-22.04  # Matching the build job's OS
    if: >
      ${{ 
        (
          github.event_name == 'release' && 
          github.event.action == 'published'
        ) || 
        (
          github.event_name == 'push' && 
          startsWith(github.ref, 'refs/tags/v')
        )
      }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: built-python-package
          path: dist

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine
        shell: bash

      - name: Publish to PyPI with Twine
        run: |
          python -m twine upload dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
